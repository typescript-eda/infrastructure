#+TITLE: TypeScript-EDA Infrastructure Development Journal
#+SUBTITLE: Design Decisions and Lessons Learned in Adapter Development
#+AUTHOR: TypeScript-EDA Infrastructure Team
#+DATE: 2025-07-03
#+LAYOUT: project
#+PROJECT: typescript-eda-infrastructure

* Overview

This journal documents the key design decisions, challenges, and lessons learned during the development of the TypeScript-EDA Infrastructure layer. It serves as a record of architectural choices and provides insights for building robust adapters that connect domain logic to external systems.

* Core Design Decisions

** Decision 1: @AdapterFor Decorator vs. Manual Registration

*** Problem
How should adapters be associated with their corresponding ports?

*** Analysis
*Manual Registration*:
- Pros: Explicit, no magic, easy to debug
- Cons: Boilerplate code, error-prone, requires maintenance

*Convention-Based*:
- Pros: No configuration needed, automatic discovery
- Cons: Fragile, naming dependencies, hard to debug

*Decorator-Based*:
- Pros: Explicit declaration, metadata-driven, discoverable
- Cons: Reflection dependency, decorator complexity

*** Decision: @AdapterFor Decorator
We chose the decorator approach with explicit port association:

#+BEGIN_SRC typescript
@AdapterFor(UserRepository)
export class PostgresUserRepository extends UserRepository {
  // Implementation
}

export function AdapterFor(port: Port): ClassDecorator {
  return (target: unknown) => {
    // Store metadata linking adapter to port
    Reflect.defineMetadata('port', port, target);
    
    // Register in global registry for discovery
    AdapterRegistry.register(port, target as any);
  };
}
#+END_SRC

*Rationale*:
1. Explicit declaration prevents accidental port-adapter mismatches
2. Metadata enables automatic discovery and dependency injection
3. Compile-time type safety ensures adapters implement correct interfaces
4. Clear separation between domain contracts and infrastructure implementations

** Decision 2: Error Handling Strategy - Translation vs. Propagation

*** Problem
How should adapters handle errors from external systems?

*** Analysis
*Direct Propagation*:
- Pros: Simple, preserves original error information
- Cons: Leaks external system details to domain layer

*Generic Translation*:
- Pros: Consistent error types across adapters
- Cons: Loss of specific error context

*Domain-Specific Translation*:
- Pros: Meaningful errors for domain layer, preserves context
- Cons: More code, adapter-specific error types

*** Decision: Domain-Specific Error Translation
We implemented domain-specific error translation with context preservation:

#+BEGIN_SRC typescript
@AdapterFor(PaymentPort)
export class StripePaymentAdapter extends PaymentPort {
  public async processPayment(payment: Payment): Promise<PaymentResult> {
    try {
      const result = await this.stripeClient.charges.create(paymentData);
      return this.mapToPaymentResult(result);
    } catch (error) {
      throw this.translateStripeError(error, payment);
    }
  }

  private translateStripeError(error: any, payment: Payment): Error {
    switch (error.type) {
      case 'StripeCardError':
        return new PaymentDeclinedError(
          error.message,
          payment.getPaymentMethod(),
          error.decline_code
        );
        
      case 'StripeRateLimitError':
        return new PaymentServiceUnavailableError(
          'Payment service temporarily unavailable',
          error.headers['retry-after']
        );
        
      case 'StripeConnectionError':
        return new PaymentServiceConnectionError(
          'Unable to connect to payment service',
          error
        );
        
      default:
        return new PaymentProcessingError(
          `Unexpected payment error: ${error.message}`,
          error
        );
    }
  }
}
#+END_SRC

*Rationale*:
1. Domain layer receives meaningful, actionable error information
2. External system details are abstracted away
3. Error context is preserved for debugging and monitoring
4. Consistent error handling patterns across all adapters

** Decision 3: Configuration Management - Environment vs. Injection

*** Problem
How should adapters receive their configuration?

*** Analysis
*Environment Variables*:
- Pros: Standard deployment practice, no code changes
- Cons: Type safety issues, hard to validate

*Constructor Injection*:
- Pros: Type safety, explicit dependencies, testable
- Cons: More verbose, requires dependency injection setup

*Configuration Objects*:
- Pros: Structured configuration, validation, type safety
- Cons: Additional abstraction layer

*** Decision: Configuration Objects with Validation
We implemented structured configuration with comprehensive validation:

#+BEGIN_SRC typescript
export interface DatabaseConfig {
  host: string;
  port: number;
  database: string;
  username: string;
  password: string;
  ssl?: boolean;
  maxConnections?: number;
}

export class InfrastructureConfig {
  public readonly database: DatabaseConfig;

  constructor() {
    this.database = this.loadDatabaseConfig();
    this.validate();
  }

  private loadDatabaseConfig(): DatabaseConfig {
    return {
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '5432'),
      database: process.env.DB_NAME || 'app_db',
      username: process.env.DB_USERNAME!,
      password: process.env.DB_PASSWORD!,
      ssl: process.env.DB_SSL === 'true',
      maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '10')
    };
  }

  private validate(): void {
    if (!this.database.username) {
      throw new ConfigurationError('Database username is required');
    }
    
    if (!this.database.password) {
      throw new ConfigurationError('Database password is required');
    }
    
    if (this.database.port < 1 || this.database.port > 65535) {
      throw new ConfigurationError(`Invalid port: ${this.database.port}`);
    }
  }
}
#+END_SRC

*Rationale*:
1. Type safety prevents configuration errors at compile time
2. Validation catches configuration issues at startup
3. Structured configuration is easier to test and debug
4. Environment variables remain the data source for deployment flexibility

** Decision 4: Adapter Lifecycle Management

*** Problem
How should adapters handle initialization, health checking, and shutdown?

*** Analysis
*No Lifecycle Management*:
- Pros: Simple, no overhead
- Cons: Resource leaks, no health monitoring

*Automatic Lifecycle*:
- Pros: No manual management needed
- Cons: Hidden behavior, hard to control timing

*Explicit Lifecycle with Standard Interface*:
- Pros: Predictable behavior, resource control, health monitoring
- Cons: More boilerplate, interface complexity

*** Decision: Explicit Lifecycle with Port Interface
We implemented a standard lifecycle interface for all adapters:

#+BEGIN_SRC typescript
export abstract class Port {
  public abstract readonly name: string;
  
  public abstract initialize(): Promise<void>;
  public abstract shutdown(): Promise<void>;
  public abstract isHealthy(): Promise<boolean>;
}

@AdapterFor(UserRepository)
export class PostgresUserRepository extends UserRepository {
  private connection: Connection;

  public async initialize(): Promise<void> {
    try {
      this.connection = await createConnection(this.config);
      await this.connection.query('SELECT 1'); // Test connection
      console.log(`âœ… ${this.name} initialized successfully`);
    } catch (error) {
      throw new AdapterInitializationError(`Failed to initialize ${this.name}`, error);
    }
  }

  public async shutdown(): Promise<void> {
    if (this.connection) {
      await this.connection.close();
      console.log(`ðŸ”Œ ${this.name} shut down successfully`);
    }
  }

  public async isHealthy(): Promise<boolean> {
    try {
      if (!this.connection) return false;
      await this.connection.query('SELECT 1');
      return true;
    } catch {
      return false;
    }
  }
}
#+END_SRC

*Rationale*:
1. Predictable initialization order prevents startup issues
2. Health checks enable monitoring and alerting
3. Graceful shutdown prevents resource leaks
4. Standard interface makes lifecycle management consistent

* Challenges and Solutions

** Challenge 1: Database Transaction Management

*** Problem
How to handle database transactions across multiple repository operations?

*** Initial Approach
Each repository method handled its own transactions:

#+BEGIN_SRC typescript
// Problematic: No transaction coordination
export class PostgresUserRepository extends UserRepository {
  public async save(user: User): Promise<void> {
    const transaction = await this.connection.beginTransaction();
    try {
      await transaction.query('INSERT INTO users...');
      await transaction.commit();
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  }
}
#+END_SRC

*** Solution: Unit of Work Pattern
Implemented a Unit of Work pattern for transaction coordination:

#+BEGIN_SRC typescript
export class DatabaseUnitOfWork {
  private transaction: Transaction;

  constructor(private connection: Connection) {}

  public async begin(): Promise<void> {
    this.transaction = await this.connection.beginTransaction();
  }

  public async commit(): Promise<void> {
    await this.transaction.commit();
  }

  public async rollback(): Promise<void> {
    await this.transaction.rollback();
  }

  public getTransaction(): Transaction {
    return this.transaction;
  }
}

// Repository uses shared transaction
@AdapterFor(UserRepository)
export class PostgresUserRepository extends UserRepository {
  public async save(user: User, unitOfWork?: DatabaseUnitOfWork): Promise<void> {
    const query = 'INSERT INTO users...';
    const params = [...];

    if (unitOfWork) {
      await unitOfWork.getTransaction().query(query, params);
    } else {
      await this.connection.query(query, params);
    }
  }
}

// Application layer coordinates transactions
export class UserRegistrationService {
  public async registerUser(userData: UserData): Promise<void> {
    const unitOfWork = new DatabaseUnitOfWork(this.connection);
    
    try {
      await unitOfWork.begin();
      
      const user = User.register(userData);
      await this.userRepository.save(user, unitOfWork);
      
      const profile = UserProfile.create(user.id, userData.profile);
      await this.profileRepository.save(profile, unitOfWork);
      
      await unitOfWork.commit();
    } catch (error) {
      await unitOfWork.rollback();
      throw error;
    }
  }
}
#+END_SRC

*Lesson Learned*: Infrastructure patterns like Unit of Work help coordinate complex operations across multiple adapters.

** Challenge 2: Testing External Dependencies

*** Problem
How to test adapters that depend on external services without hitting real endpoints?

*** Initial Approach
Mocking individual HTTP calls:

#+BEGIN_SRC typescript
// Fragile: Mocking implementation details
describe('SendGridAdapter', () => {
  it('should send email', async () => {
    const mockHttp = {
      post: jest.fn().mockResolvedValue({ ok: true })
    };
    
    const adapter = new SendGridAdapter('key', mockHttp);
    await adapter.sendEmail(email, 'subject', 'body');
    
    expect(mockHttp.post).toHaveBeenCalledWith(/* specific API details */);
  });
});
#+END_SRC

*** Solution: Contract Testing + Test Containers
Implemented contract testing with real service simulation:

#+BEGIN_SRC typescript
// Contract testing focuses on behavior
describe('NotificationAdapter Contract', () => {
  const adapters = [
    new SendGridAdapter('test-key', mockHttpClient),
    new SMTPAdapter(smtpConfig),
    new ConsoleAdapter()
  ];

  adapters.forEach(adapter => {
    describe(`${adapter.constructor.name}`, () => {
      it('should send email successfully', async () => {
        const email = new Email('test@example.com');
        
        // Test behavior, not implementation
        await expect(
          adapter.sendEmail(email, 'Subject', 'Body')
        ).resolves.not.toThrow();
      });
      
      it('should handle service errors gracefully', async () => {
        const invalidEmail = new Email('invalid@domain');
        
        await expect(
          adapter.sendEmail(invalidEmail, 'Subject', 'Body')
        ).rejects.toThrow(NotificationDeliveryError);
      });
    });
  });
});

// Integration testing with test containers
describe('PostgresRepository Integration', () => {
  let container: StartedTestContainer;
  
  beforeAll(async () => {
    container = await new PostgreSqlContainer().start();
    // Setup with real database
  });
  
  afterAll(async () => {
    await container.stop();
  });
});
#+END_SRC

*Lesson Learned*: Test adapter contracts rather than implementation details, and use real services for integration testing.

** Challenge 3: Configuration Validation and Error Messages

*** Problem
Poor error messages made configuration issues hard to diagnose in production.

*** Initial Approach
Basic validation with generic errors:

#+BEGIN_SRC typescript
// Unhelpful error messages
if (!config.apiKey) {
  throw new Error('API key required');
}
#+END_SRC

*** Solution: Comprehensive Validation with Context
Implemented detailed validation with helpful error messages:

#+BEGIN_SRC typescript
export class ConfigurationValidator {
  public static validateNotificationConfig(config: NotificationConfig): void {
    const errors: string[] = [];
    
    if (!config.provider) {
      errors.push('notification.provider is required (sendgrid, smtp, or console)');
    }
    
    if (config.provider === 'sendgrid') {
      if (!config.apiKey) {
        errors.push('notification.apiKey is required when using SendGrid provider');
      }
      
      if (config.apiKey && !config.apiKey.startsWith('SG.')) {
        errors.push('notification.apiKey appears to be invalid (SendGrid keys start with "SG.")');
      }
    }
    
    if (config.provider === 'smtp') {
      const required = [
        { field: 'smtpHost', value: config.smtpHost },
        { field: 'smtpUsername', value: config.smtpUsername },
        { field: 'smtpPassword', value: config.smtpPassword }
      ];
      
      required.forEach(({ field, value }) => {
        if (!value) {
          errors.push(`notification.${field} is required when using SMTP provider`);
        }
      });
      
      if (config.smtpPort && (config.smtpPort < 1 || config.smtpPort > 65535)) {
        errors.push(`notification.smtpPort must be between 1 and 65535, got ${config.smtpPort}`);
      }
    }
    
    if (errors.length > 0) {
      throw new ConfigurationError(
        'Notification configuration errors:\n' + 
        errors.map(error => `  - ${error}`).join('\n') +
        '\n\nExample configuration:\n' +
        this.getExampleConfiguration(config.provider)
      );
    }
  }
  
  private static getExampleConfiguration(provider: string): string {
    switch (provider) {
      case 'sendgrid':
        return `
NOTIFICATION_PROVIDER=sendgrid
NOTIFICATION_API_KEY=SG.your-sendgrid-api-key
NOTIFICATION_FROM_EMAIL=noreply@yourdomain.com`;
        
      case 'smtp':
        return `
NOTIFICATION_PROVIDER=smtp
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password
NOTIFICATION_FROM_EMAIL=noreply@yourdomain.com`;
        
      default:
        return `NOTIFICATION_PROVIDER=console`;
    }
  }
}
#+END_SRC

*Lesson Learned*: Detailed validation with helpful error messages and examples significantly improves developer experience.

** Challenge 4: Adapter Performance and Monitoring

*** Problem
No visibility into adapter performance and external service health.

*** Initial Approach
Basic logging:

#+BEGIN_SRC typescript
// Minimal observability
public async save(user: User): Promise<void> {
  console.log('Saving user...');
  await this.connection.query(sql, params);
  console.log('User saved');
}
#+END_SRC

*** Solution: Comprehensive Instrumentation
Implemented detailed metrics and monitoring:

#+BEGIN_SRC typescript
@AdapterFor(UserRepository)
export class InstrumentedPostgresUserRepository extends PostgresUserRepository {
  constructor(
    connection: Connection,
    private metrics: MetricsCollector,
    private logger: Logger
  ) {
    super(connection);
  }

  public async findByEmail(email: Email): Promise<User | null> {
    const timer = this.metrics.startTimer('user_repository.find_by_email');
    const startTime = Date.now();
    
    try {
      this.logger.debug('Finding user by email', { 
        email: email.getValue(),
        operation: 'findByEmail'
      });
      
      const result = await super.findByEmail(email);
      
      const duration = Date.now() - startTime;
      
      // Record metrics
      this.metrics.recordHistogram('user_repository.query_duration_ms', duration);
      this.metrics.incrementCounter('user_repository.queries_total', {
        operation: 'find_by_email',
        status: 'success',
        found: result ? 'true' : 'false'
      });
      
      // Structured logging
      this.logger.info('User query completed', {
        email: email.getValue(),
        operation: 'findByEmail',
        duration,
        found: !!result,
        userId: result?.id.getValue()
      });
      
      return result;
    } catch (error) {
      const duration = Date.now() - startTime;
      
      // Error metrics
      this.metrics.incrementCounter('user_repository.queries_total', {
        operation: 'find_by_email',
        status: 'error',
        error_type: error.constructor.name
      });
      
      // Error logging
      this.logger.error('User query failed', {
        email: email.getValue(),
        operation: 'findByEmail',
        duration,
        error: error.message,
        stack: error.stack
      });
      
      throw error;
    } finally {
      timer.end();
    }
  }
}

// Health check implementation
public async isHealthy(): Promise<boolean> {
  const healthTimer = this.metrics.startTimer('user_repository.health_check');
  
  try {
    await this.connection.query('SELECT 1');
    
    this.metrics.incrementCounter('user_repository.health_checks_total', {
      status: 'healthy'
    });
    
    return true;
  } catch (error) {
    this.metrics.incrementCounter('user_repository.health_checks_total', {
      status: 'unhealthy',
      error_type: error.constructor.name
    });
    
    this.logger.warn('Database health check failed', {
      error: error.message
    });
    
    return false;
  } finally {
    healthTimer.end();
  }
}
#+END_SRC

*Lesson Learned*: Comprehensive monitoring and structured logging are essential for production adapter reliability.

* Performance Considerations

** Database Connection Pooling

*** Problem
Individual connections per repository operation caused performance issues.

*** Solution
Implemented connection pooling with proper lifecycle management:

#+BEGIN_SRC typescript
export class PostgresConnectionPool {
  private pool: Pool;

  constructor(config: DatabaseConfig) {
    this.pool = new Pool({
      host: config.host,
      port: config.port,
      database: config.database,
      user: config.username,
      password: config.password,
      max: config.maxConnections || 10,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
  }

  public async query(sql: string, params?: any[]): Promise<QueryResult> {
    const start = Date.now();
    const client = await this.pool.connect();
    
    try {
      const result = await client.query(sql, params);
      const duration = Date.now() - start;
      
      // Log slow queries
      if (duration > 1000) {
        console.warn(`Slow query detected: ${duration}ms`, { sql, params });
      }
      
      return result;
    } finally {
      client.release();
    }
  }

  public async shutdown(): Promise<void> {
    await this.pool.end();
  }
}
#+END_SRC

** HTTP Client Optimization

*** Problem
Each HTTP adapter created its own client with default settings.

*** Solution
Implemented optimized HTTP client with connection reuse:

#+BEGIN_SRC typescript
export class OptimizedHttpClient {
  private client: AxiosInstance;

  constructor(baseURL?: string) {
    this.client = axios.create({
      baseURL,
      timeout: 30000,
      maxRedirects: 3,
      // Connection pooling
      httpAgent: new http.Agent({ 
        keepAlive: true,
        maxSockets: 10 
      }),
      httpsAgent: new https.Agent({ 
        keepAlive: true,
        maxSockets: 10 
      }),
      // Response size limits
      maxContentLength: 10 * 1024 * 1024, // 10MB
      maxBodyLength: 10 * 1024 * 1024,
    });

    // Request/response interceptors for monitoring
    this.setupInterceptors();
  }

  private setupInterceptors(): void {
    this.client.interceptors.request.use(
      (config) => {
        config.metadata = { startTime: Date.now() };
        return config;
      }
    );

    this.client.interceptors.response.use(
      (response) => {
        const duration = Date.now() - response.config.metadata.startTime;
        
        // Log performance metrics
        console.log(`HTTP ${response.config.method?.toUpperCase()} ${response.config.url}: ${response.status} (${duration}ms)`);
        
        return response;
      },
      (error) => {
        const duration = Date.now() - error.config?.metadata?.startTime;
        
        console.error(`HTTP ${error.config?.method?.toUpperCase()} ${error.config?.url}: ${error.response?.status || 'NETWORK_ERROR'} (${duration}ms)`);
        
        return Promise.reject(error);
      }
    );
  }
}
#+END_SRC

* Testing Strategies

** Unit Testing Approach

Focus on adapter logic, not external dependencies:

#+BEGIN_SRC typescript
describe('StripePaymentAdapter Unit Tests', () => {
  let adapter: StripePaymentAdapter;
  let mockStripeClient: jest.Mocked<Stripe>;

  beforeEach(() => {
    mockStripeClient = createMockStripeClient();
    adapter = new StripePaymentAdapter(mockStripeClient);
  });

  describe('error translation', () => {
    it('should translate card errors to domain errors', async () => {
      const stripeError = new StripeCardError('Your card was declined');
      mockStripeClient.charges.create.mockRejectedValue(stripeError);

      const payment = createTestPayment();

      await expect(adapter.processPayment(payment))
        .rejects.toThrow(PaymentDeclinedError);
    });

    it('should translate rate limit errors', async () => {
      const rateLimitError = new StripeRateLimitError('Rate limit exceeded');
      mockStripeClient.charges.create.mockRejectedValue(rateLimitError);

      const payment = createTestPayment();

      await expect(adapter.processPayment(payment))
        .rejects.toThrow(PaymentServiceUnavailableError);
    });
  });
});
#+END_SRC

** Integration Testing with Test Containers

Test real integration without production dependencies:

#+BEGIN_SRC typescript
describe('E2E Notification Flow', () => {
  let smtpContainer: StartedGenericContainer;
  let adapter: SMTPNotificationAdapter;

  beforeAll(async () => {
    // Start MailHog SMTP server
    smtpContainer = await new GenericContainer('mailhog/mailhog')
      .withExposedPorts(1025, 8025)
      .start();

    const smtpPort = smtpContainer.getMappedPort(1025);
    const webPort = smtpContainer.getMappedPort(8025);

    adapter = new SMTPNotificationAdapter({
      host: 'localhost',
      port: smtpPort,
      username: '',
      password: '',
      fromEmail: 'test@example.com'
    });

    await adapter.initialize();
  });

  afterAll(async () => {
    await adapter.shutdown();
    await smtpContainer.stop();
  });

  it('should send email through SMTP', async () => {
    const email = new Email('recipient@example.com');
    
    await adapter.sendEmail(email, 'Test Subject', 'Test Body');

    // Verify email was received (via MailHog API)
    const response = await axios.get(`http://localhost:${webPort}/api/v2/messages`);
    expect(response.data.items).toHaveLength(1);
    
    const message = response.data.items[0];
    expect(message.Content.Headers.Subject).toContain('Test Subject');
    expect(message.Content.Body).toContain('Test Body');
  });
});
#+END_SRC

* Lessons Learned

** What Worked Well

1. **@AdapterFor Decorator**: Provided clear, discoverable mapping between ports and adapters
2. **Domain-Specific Error Translation**: Made error handling meaningful for business logic
3. **Configuration Validation**: Prevented deployment issues with helpful error messages
4. **Lifecycle Management**: Enabled predictable resource management and health monitoring
5. **Contract Testing**: Ensured adapters fulfilled their port contracts consistently

** What Could Be Improved

1. **Adapter Composition**: Need better patterns for combining multiple adapters
2. **Circuit Breaker Pattern**: Could improve resilience for external service failures
3. **Caching Layer**: Many adapters could benefit from intelligent caching strategies
4. **Configuration Hot-Reloading**: Runtime configuration changes would improve operations

** Architecture Insights

1. **Infrastructure Complexity**: External systems are the primary source of application complexity
2. **Error Translation Value**: Domain-specific errors significantly improve debugging and monitoring
3. **Testing Strategy**: Combination of contract testing and integration testing provides best coverage
4. **Performance Monitoring**: Infrastructure layer performance directly impacts user experience
5. **Configuration Importance**: Poor configuration management causes more production issues than code bugs

* Future Enhancements

** Adaptive Retry Strategies
- Implement intelligent retry with exponential backoff
- Circuit breaker patterns for failing services
- Graceful degradation strategies

** Advanced Monitoring
- Distributed tracing across adapter calls
- Real-time performance dashboards
- Automated alerting for service degradation

** Configuration Management
- Hot configuration reloading
- Configuration validation in CI/CD pipelines
- Environment-specific configuration templates

** Security Enhancements
- Secret rotation for API keys
- Certificate management for TLS connections
- Audit logging for all external communications

* Conclusion

The TypeScript-EDA Infrastructure layer successfully bridges the gap between pure domain logic and external systems. Key insights from its development:

1. **Explicit Contracts**: Clear port-adapter relationships prevent integration issues
2. **Error Translation**: Domain-specific errors improve application resilience
3. **Lifecycle Management**: Predictable initialization and shutdown prevent resource leaks
4. **Comprehensive Testing**: Contract and integration testing ensure reliable adapters
5. **Monitoring Focus**: Infrastructure performance monitoring is essential for production

The infrastructure layer proves that complex external integrations can be managed cleanly while preserving domain purity and maintaining operational excellence.